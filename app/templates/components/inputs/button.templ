package inputs

import "maps"

type ButtonOptions struct {
	Text     string
	Varient  string
	Padding  string
	Disabled bool
	Htmx     HtmxOptions
	OnClick  *string
}

type HtmxOptions struct {
	HxGet     *string
	HxPut     *string
	HxTarget  *string
	HxSwap    *string
	HxPushUrl *string
	HxTrigger *string
	HxInclude *string
}

func (b *ButtonOptions) TemplAttributes() templ.Attributes {
	tmplAttr := templ.Attributes{}
	if b.Disabled {
		tmplAttr["disabled"] = b.Disabled
	}

	btnClasses := " uppercase font-bold rounded disabled:bg-stone-400 disabled:text-white focus:outline-none"
	paddingClasses := ""
	switch b.Padding {
	case "r1":
		paddingClasses = " py-1 px-2"
	case "r2":
		paddingClasses = " py-2 px-4"
	case "s1":
		paddingClasses = " py-1 px-1"
	case "s2":
		paddingClasses = " py-2 px-2"
	default:
		paddingClasses = " py-2 px-4"
	}
	switch b.Varient {
	case "contained":
		hoverTailwind := " hover:bg-varient-primary-hover"
		focusTailwind := " focus:ring-txt-primary focus:border-txt-primary"
		tmplAttr["class"] = "bg-varient-primary text-bg-main border-2 border-transparent" + hoverTailwind + focusTailwind + btnClasses + paddingClasses
	case "text":
		hoverTailwind := " hover:bg-varient-primary/10"
		focusTailwind := " focus:ring-varient-primary focus:border-varient-primary"
		tmplAttr["class"] = "bg-transparent text-varient-primary border-2 border-transparent" + hoverTailwind + focusTailwind + btnClasses + paddingClasses
	case "outline":
		hoverTailwind := " hover:bg-varient-primary/10"
		focusTailwind := " focus:ring-txt-primary focus:border-txt-primary"
		tmplAttr["class"] = "bg-transparent text-varient-primary border-2 border-varient-primary" + hoverTailwind + focusTailwind + btnClasses + paddingClasses
	default:
		hoverTailwind := " hover:bg-varient-primary-hover"
		focusTailwind := " focus:ring-txt-primary focus:border-txt-primary"
		tmplAttr["class"] = "bg-varient-primary text-bg-main border-2 border-transparent" + hoverTailwind + focusTailwind + btnClasses + paddingClasses
	}

	if b.OnClick != nil {
		tmplAttr["onClick"] = b.OnClick
	}

	htmxAttr := b.Htmx.TemplAttributes()

	maps.Copy(tmplAttr, htmxAttr)

	return tmplAttr
}

func (h *HtmxOptions) TemplAttributes() templ.Attributes {
	tmplAttr := templ.Attributes{}
	if h.HxGet != nil {
		tmplAttr["hx-get"] = h.HxGet
	}
	if h.HxPut != nil {
		tmplAttr["hx-put"] = h.HxPut
	}
	if h.HxTarget != nil {
		tmplAttr["hx-target"] = h.HxTarget
	}
	if h.HxSwap != nil {
		tmplAttr["hx-swap"] = h.HxSwap
	}
	if h.HxPushUrl != nil {
		tmplAttr["hx-push-url"] = h.HxPushUrl
	}
	if h.HxTrigger != nil {
		tmplAttr["hx-trigger"] = h.HxTrigger
	}
	if h.HxInclude != nil {
		tmplAttr["hx-include"] = h.HxInclude
	}
	return tmplAttr
}

templ Button(opts ButtonOptions) {
	<button { opts.TemplAttributes()... }>
		{ children... }
	</button>
}

templ ButtonText(opts ButtonOptions) {
	@Button(opts) {
		{ opts.Text }
	}
}
