package views

templ LoginSignUpPage() {
<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<title>Wonk</title>
	<link rel="stylesheet" href="static/css/output.css">
	<script src="/static/script/htmx.min.js"></script>
</head>

<body class="overscroll-none">
	<script>
		document.body.addEventListener('htmx:beforeSwap', function (evt) {
			if (evt.detail.xhr.status === 404) {
				// alert the user when a 404 occurs (maybe use a nicer mechanism than alert())
				alert("Error: Could Not Find Resource");
			} else if (evt.detail.xhr.status === 422) {
				// allow 422 responses to swap as we are using this as a signal that
				// a form was submitted with bad data and want to rerender with the errors
				// set isError to false to avoid error logging in console
				evt.detail.shouldSwap = true;
				evt.detail.isError = false;
			}
		});
	</script>
	<div class="h-screen bg-stone-100 flex flex-col justify-center items-center">
		<div id="contain-div" class="flex flex-col bg-stone-300 w-2/3 h-4/5 rounded-lg p-12 justify-between">
			{ children... }
		</div>
	</div>
</body>

</html>
}

templ LoginPage(formData LoginFormData) {
@LoginSignUpPage(){
@Login(formData)
}
}

templ SignUpPage(formData LoginFormData) {
@LoginSignUpPage(){
@SignUp(formData)
}
}

templ Login(formData LoginFormData) {
<div>
	<h1 class="text-xl">Log In</h1>
	<br>
	@LoginForm(formData)
</div>
<div class="w-full">
	<p>New to Wonk?</p>
	<button hx-get="/signup" hx-target="#contain-div" hx-swap="innerHTML" hx-push-url="/signup"
		class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded my-2 w-full">
		Sign Up
	</button>
</div>
}

type LoginFormData struct {
Username string
FormErr *string
}
templ LoginForm(formData LoginFormData) {
<form hx-swap="outerHTML" hx-post="/login" class="flex flex-col" autocomplete="off">
	<label for="username">Username:</label>
	<input id="username" type="text" name="username" required value={formData.Username}
		class="border border-gray-300 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
	<label for="password">Password:</label>
	<input id="password" type="password" name="password" required
		class="border border-gray-300 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
	<button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded my-2">
		Login
	</button>
	if formData.FormErr != nil {
	<div class="text-red-700">{*formData.FormErr}</div>
	}

</form>
}

templ SignUp(formData LoginFormData) {
<div>
	<h1 class="text-xl">Sign Up</h1>
	<br>
	@SignUpForm(formData)
</div>
<div class="w-full">
	<p>Already have an account?</p>
	<button hx-get="/login" hx-target="#contain-div" hx-swap="innerHTML" hx-push-url="/login"
		class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded my-2 w-full">
		Log In
	</button>
</div>
}

templ SignUpForm(formData LoginFormData) {
<form hx-swap="outerHTML" hx-post="/signup" autocomplete="off">
	<label for="username">Username:</label>
	<input id="username" type="text" name="username" required value={formData.Username}
		class="border border-gray-300 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
	<label for="password">Password:</label>
	<input id="password" type="password" name="password" required
		class="border border-gray-300 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
	<button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded my-2 w-full">
		Create
	</button>
	if formData.FormErr != nil {
	<div class="text-red-700">{*formData.FormErr}</div>
	}

</form>
}
