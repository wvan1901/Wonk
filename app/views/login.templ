package views

import (
	"wonk/app/components/inputs"
	"wonk/app/strutil"
)

templ LoginSignUpPage() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<title>Wonk</title>
			<link rel="stylesheet" href="static/css/output.css"/>
			<script src="/static/script/htmx.min.js"></script>
		</head>
		<body class="overscroll-none light text-txt-primary bg-bg-main">
			<script>
		document.body.addEventListener('htmx:beforeSwap', function (evt) {
			if (evt.detail.xhr.status === 404) {
				// alert the user when a 404 occurs (maybe use a nicer mechanism than alert())
				alert("Error: Could Not Find Resource");
			} else if (evt.detail.xhr.status === 422) {
				// allow 422 responses to swap as we are using this as a signal that
				// a form was submitted with bad data and want to rerender with the errors
				// set isError to false to avoid error logging in console
				evt.detail.shouldSwap = true;
				evt.detail.isError = false;
			}
		});
		</script>
			<div class="h-screen flex flex-col justify-center items-center">
				<div id="contain-div" class="flex flex-col border w-2/3 h-4/5 rounded-lg p-12 justify-between">
					{ children... }
				</div>
			</div>
		</body>
	</html>
}

templ LoginPage(formData LoginFormData) {
	@LoginSignUpPage() {
		@Login(formData)
	}
}

templ SignUpPage(formData LoginFormData) {
	@LoginSignUpPage() {
		@SignUp(formData)
	}
}

templ Login(formData LoginFormData) {
	<div class="flex flex-col">
		<h1 class="text-xl">Log In</h1>
		<br/>
		@LoginForm(formData)
	</div>
	<div class="w-full flex flex-col">
		<p>New to Wonk?</p>
		@inputs.Button(inputs.ButtonOptions{
			Varient: "outline",
			Text:    "Sign Up",
			Htmx: inputs.HtmxOptions{
				HxGet:     strutil.StrPtr("/signup"),
				HxTarget:  strutil.StrPtr("#contain-div"),
				HxSwap:    strutil.StrPtr("innerHTML"),
				HxPushUrl: strutil.StrPtr("/signup"),
			},
		})
	</div>
}

type LoginFormData struct {
	Username string
	FormErr  *string
}

templ LoginForm(formData LoginFormData) {
	<form hx-swap="outerHTML" hx-post="/login" class="flex flex-col gap-2" autocomplete="off">
		<div>
			<label for="username">Username:</label>
			@inputs.TextField(inputs.TextFieldOptions{
				Varient:  "outlined",
				Id:       strutil.StrPtr("username"),
				Name:     strutil.StrPtr("username"),
				Value:    &formData.Username,
				Required: true,
			})
		</div>
		<div>
			<label for="password">Password:</label>
			<input
				id="password"
				type="password"
				name="password"
				required
				class="border border-gray-300 focus:ring-varient-primary focus:border-varient-primary focus:outline-none text-sm rounded-lg block w-full p-2.5"
			/>
		</div>
		@inputs.Button(inputs.ButtonOptions{Varient: "contained", Text: "Login"})
		if formData.FormErr != nil {
			<div class="text-red-700">{ *formData.FormErr }</div>
		}
	</form>
}

templ SignUp(formData LoginFormData) {
	<div>
		<h1 class="text-xl">Sign Up</h1>
		<br/>
		@SignUpForm(formData)
	</div>
	<div class="w-full flex flex-col">
		<p>Already have an account?</p>
		@inputs.Button(inputs.ButtonOptions{
			Varient: "outline",
			Text:    "Log In",
			Htmx: inputs.HtmxOptions{
				HxGet:     strutil.StrPtr("/login"),
				HxTarget:  strutil.StrPtr("#contain-div"),
				HxSwap:    strutil.StrPtr("innerHTML"),
				HxPushUrl: strutil.StrPtr("/login"),
			},
		})
	</div>
}

templ SignUpForm(formData LoginFormData) {
	<form hx-swap="outerHTML" hx-post="/signup" autocomplete="off" class="flex flex-col gap-2">
		<div>
			<label for="username">Username:</label>
			@inputs.TextField(inputs.TextFieldOptions{
				Varient:  "outlined",
				Id:       strutil.StrPtr("username"),
				Name:     strutil.StrPtr("username"),
				Value:    &formData.Username,
				Required: true,
			})
		</div>
		<div>
			<label for="password">Password:</label>
			<input
				id="password"
				type="password"
				name="password"
				required
				class="border border-gray-300 focus:ring-varient-primary focus:border-varient-primary focus:outline-none text-sm rounded-lg block w-full p-2.5"
			/>
		</div>
		@inputs.Button(inputs.ButtonOptions{
			Varient: "contained",
			Text:    "Create Account",
		})
		if formData.FormErr != nil {
			<div class="text-red-700">{ *formData.FormErr }</div>
		}
	</form>
}
