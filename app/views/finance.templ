package views

import (
	"wonk/app/database"
	"wonk/app/services/finance"
	"wonk/app/components/inputs"
	"strconv"
	"time"
	"fmt"
	"wonk/app/strutil"
)

templ Finance(s finance.MonthSummary) {
	<div class="overflow-scroll h-full">
		@FinanceNavBar()
		@MontlySummary(s)
	</div>
}

templ FinancePage(s finance.MonthSummary) {
	@Page() {
		@Finance(s)
	}
}

templ FinanceNavBar() {
	<div class="flex flex-row">
		@inputs.Button(inputs.ButtonOptions{
			Varient: "text",
			Text:    "Submit",
			Htmx: inputs.HtmxOptions{
				HxGet:    strutil.StrPtr("/finance/submit"),
				HxTarget: strutil.StrPtr("#finance-content"),
				HxSwap:   strutil.StrPtr("outerHTML"),
			},
		})
		@inputs.Button(inputs.ButtonOptions{
			Varient: "text",
			Text:    "View",
		})
	</div>
}

templ MontlySummary(s finance.MonthSummary) {
	<div id="finance-content">
		<h3 class="py-2">Search Monthly Summary</h3>
		<form class="flex flex-col gap-2" autocomplete="off" hx-post="/finance" hx-target="#monthlyTable" hx-swap="outerHTML">
			<div>
				<label for="month">Month:</label>
				@inputs.Dropdown(inputs.DropdownOptions{
					Varient:  "base",
					Id:       strutil.StrPtr("month"),
					Name:     strutil.StrPtr("month"),
					Required: true,
					Options:  GetMonthChildren(),
				})
			</div>
			<div>
				<label for="year">Year:</label>
				@inputs.Dropdown(inputs.DropdownOptions{
					Varient:  "base",
					Id:       strutil.StrPtr("year"),
					Name:     strutil.StrPtr("year"),
					Required: true,
					Options: []inputs.DropdownChildren{
						{Value: "2024", Text: "2024"},
						{Value: "2025", Text: "2025", IsCurrent: true},
						{Value: "2026", Text: "2026"},
						{Value: "2027", Text: "2027"},
					},
				})
			</div>
			@inputs.Button(inputs.ButtonOptions{
				Varient: "contained",
				Text:    "Search",
			})
		</form>
		<br/>
		<h3>Monthly Summary</h3>
		@MonthlyTable(s)
	</div>
}

templ MonthlyTable(s finance.MonthSummary) {
	<table id="monthlyTable" class="w-full text-left rounded">
		<thead class="uppercase bg-bg-secondary">
			<tr>
				<th class="px-6 py-3">Bucket Name</th>
				<th class="px-6 py-3">Total Price($)</th>
			</tr>
		</thead>
		<tbody class="divide-y-1 divide-brdr-main">
			for _, b:= range s.BucketsSummary {
				<tr>
					<td class="px-6 py-1 font-medium">{ b.Reference.Name }</td>
					<td class="px-6 py-1">{ fmt.Sprintf("%.2f",b.Price) }</td>
				</tr>
			}
		</tbody>
		<tfoot class="bg-bg-secondary">
			<tr class="font-semibold">
				<th class="px-6 py-1">Total Income:</th>
				<th class="px-6 py-1">{ fmt.Sprintf("%.2f", s.TotalIncome) }</th>
			</tr>
			<tr class="font-semibold">
				<th class="px-6 py-1">Total Expense:</th>
				<th class="px-6 py-1">{ fmt.Sprintf("%.2f", s.TotalExpense) }</th>
			</tr>
			<tr class="font-semibold">
				<th class="px-6 py-1">NET:</th>
				<th class="px-6 py-1">{ fmt.Sprintf("%.2f", s.TotalIncome + s.TotalExpense) }</th>
			</tr>
		</tfoot>
	</table>
}

templ FinanceSubmit(
	buckets []database.Bucket,
	formData TransactionFormData,
	monthData []Month,
) {
	<div id="finance-content">
		<h3 class="py-2">Create New Transaction:</h3>
		<div>
			if len(buckets) == 0 {
				<p>No buckets found, create a bucket to be able to create a transaction</p>
			} else {
				@TransactionForm(buckets, formData, monthData)
			}
		</div>
		<br/>
		@inputs.Button(inputs.ButtonOptions{
			Varient: "text",
			Text:    "Create New Bucket",
			Htmx: inputs.HtmxOptions{
				HxGet:    strutil.StrPtr("/finance/submit/bucket"),
				HxTarget: strutil.StrPtr("#finance-content"),
				HxSwap:   strutil.StrPtr("innerHTML"),
			},
		})
	</div>
}

type Month struct {
	Name      string
	Value     string
	IsCurrent bool
}

type TransactionFormData struct {
	NameValue   string
	NameErr     *string
	PriceValue  string
	PriceErr    *string
	MonthValue  string
	MonthErr    *string
	YearValue   string
	YearErr     *string
	ExpenseErr  *string
	BucketValue string
	BucketErr   *string
}

templ TransactionForm(buckets []database.Bucket, formData TransactionFormData, monthData []Month) {
	<form class="flex flex-col gap-2" autocomplete="off" hx-post="/finance/submit">
		<div>
			<label for="name" required>Purchase Name:</label>
			@inputs.TextField(inputs.TextFieldOptions{
				Varient:  "outlined",
				Id:       strutil.StrPtr("name"),
				Name:     strutil.StrPtr("name"),
				Value:    &formData.NameValue,
				Required: true,
				ErrorMsg: formData.NameErr,
			})
		</div>
		<div>
			<label for="price">Price</label>
			<input
				id="price"
				name="price"
				type="number"
				step="0.01"
				value={ formData.PriceValue }
				required
				class="border border-gray-300 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
			/>
			if formData.PriceErr != nil {
				<div class="text-red-700">{ *formData.PriceErr }</div>
			}
		</div>
		<div>
			<label for="isExpense">Is this an Income or Expense?</label>
			<label class="flex justify-between items-center">
				<input
					id="isExpense"
					name="isExpense"
					type="checkbox"
					class="peer appearance-none rounded-md"
					checked
				/>
				<span
					class="w-full h-10 flex items-center flex-shrink-0 p-1 bg-green-300 rounded-full duration-300 ease-in-out peer-checked:bg-red-400 after:w-1/2 after:h-8 after:bg-white after:rounded-full after:shadow-md after:duration-300 peer-checked:after:translate-x-full"
				></span>
			</label>
			<div class="flex flex-row justify-around items-center text-xs">
				<p>Income</p>
				<p>Expense</p>
			</div>
			if formData.ExpenseErr != nil {
				<div class="text-red-700">{ *formData.ExpenseErr }</div>
			}
		</div>
		<div>
			<label for="month">Purchase Month:</label>
			@inputs.Dropdown(inputs.DropdownOptions{
				Varient:  "base",
				Id:       strutil.StrPtr("month"),
				Name:     strutil.StrPtr("month"),
				Required: true,
				Options:  GetMonthChildren(),
				ErrorMsg: formData.MonthErr,
			})
		</div>
		<div>
			<label for="year">Purchase Year:</label>
			if formData.YearErr != nil {
				<div class="text-red-700">{ *formData.YearErr }</div>
			}
			@inputs.Dropdown(inputs.DropdownOptions{
				Varient:  "base",
				Id:       strutil.StrPtr("year"),
				Name:     strutil.StrPtr("year"),
				Required: true,
				Options: []inputs.DropdownChildren{
					{Value: "2024", Text: "2024"},
					{Value: "2025", Text: "2025", IsCurrent: true},
					{Value: "2026", Text: "2026"},
					{Value: "2027", Text: "2027"},
				},
				ErrorMsg: formData.YearErr,
			})
		</div>
		<div>
			<label for="bucket">Bucket</label>
			@inputs.Dropdown(inputs.DropdownOptions{
				Varient:  "base",
				Id:       strutil.StrPtr("bucket"),
				Name:     strutil.StrPtr("bucket"),
				Required: true,
				Options:  bucketToDropdownOpts(buckets),
				ErrorMsg: formData.BucketErr,
			})
		</div>
		@inputs.Button(inputs.ButtonOptions{
			Varient: "contained",
			Text:    "Submit",
		})
	</form>
}

templ SuccessfulTransaction() {
	<div>Successfully created transaction item! Use top navbar to navigate.</div>
}

type BucketFormData struct {
	NameValue string
	NameErr   *string
}

templ BucketForm(formData BucketFormData) {
	<form class="flex flex-col gap-2" autocomplete="off" hx-post="/finance/submit/bucket">
		<div>
			<label for="name" required>Bucket Name:</label>
			@inputs.TextField(inputs.TextFieldOptions{
				Varient:  "outlined",
				Id:       strutil.StrPtr("name"),
				Name:     strutil.StrPtr("name"),
				Value:    &formData.NameValue,
				Required: true,
				ErrorMsg: formData.NameErr,
			})
		</div>
		@inputs.Button(inputs.ButtonOptions{
			Varient: "contained",
			Text:    "Submit",
		})
	</form>
}

templ SuccessfulBucket() {
	<div>Successfully created Bucket! Use top navbar to navigate.</div>
}

func GetMonths() []Month {
	months := []Month{
		{Name: "Jan", Value: "1", IsCurrent: false},
		{Name: "Feb", Value: "2", IsCurrent: false},
		{Name: "Mar", Value: "3", IsCurrent: false},
		{Name: "Apr", Value: "4", IsCurrent: false},
		{Name: "May", Value: "5", IsCurrent: false},
		{Name: "June", Value: "6", IsCurrent: false},
		{Name: "July", Value: "7", IsCurrent: false},
		{Name: "Aug", Value: "8", IsCurrent: false},
		{Name: "Sep", Value: "9", IsCurrent: false},
		{Name: "Oct", Value: "10", IsCurrent: false},
		{Name: "Nov", Value: "11", IsCurrent: false},
		{Name: "Dec", Value: "12", IsCurrent: false},
	}
	curMonth := int(time.Now().Month())
	months[curMonth-1].IsCurrent = true

	return months
}

func GetMonthChildren() []inputs.DropdownChildren {
	c := []inputs.DropdownChildren{
		{Value: "1", Text: "Jan", IsCurrent: false},
		{Value: "2", Text: "Feb", IsCurrent: false},
		{Value: "3", Text: "Mar", IsCurrent: false},
		{Value: "4", Text: "Apr", IsCurrent: false},
		{Value: "5", Text: "May", IsCurrent: false},
		{Value: "6", Text: "June", IsCurrent: false},
		{Value: "7", Text: "July", IsCurrent: false},
		{Value: "8", Text: "Aug", IsCurrent: false},
		{Value: "9", Text: "Sep", IsCurrent: false},
		{Value: "10", Text: "Oct", IsCurrent: false},
		{Value: "11", Text: "Nov", IsCurrent: false},
		{Value: "12", Text: "Dec", IsCurrent: false},
	}
	curMonth := int(time.Now().Month())
	c[curMonth-1].IsCurrent = true
	return c

}

func bucketToDropdownOpts(buckets []database.Bucket) []inputs.DropdownChildren {
	opts := []inputs.DropdownChildren{}
	for _, b := range buckets {
		opts = append(opts, inputs.DropdownChildren{
			Value: strconv.Itoa(b.Id),
			Text:  b.Name,
		})
	}

	return opts
}
